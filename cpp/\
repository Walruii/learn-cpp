/*
  code and analize to find the shortest path in a graph with +ve edge weights
  using dijiksh's algorithm (single shortest path algorithm)
 */

#include <iostream>
#include <list>
#include <map>
using std::cin;
using std::cout;
using std::endl;
using std::map;
using std::list;
#define V 3

typedef struct pair {
  int edge;
  int weight;
} pair;

class Graph {
public:
  map<int, list<pair>> adj;
  int adjMatrix[V][V] = {};
  void addEdge(int v, pair a);
  void showEdges();
};

void Graph::addEdge(int v, pair a) {
  adj[v].push_back(a);
  for (const auto &p : adj) {
    for (const auto &q : p.second) {
      adjMatrix[p.first][q.edge] = 1;
    }
  }
}

void Graph::showEdges() {
  cout << "adj List" << endl;
  for (const auto &p : adj) {
    cout << p.first << ": ";
    for (const auto &q : p.second) {
      cout << q.weight << " ";
    }
    cout << endl;
  }
  cout << endl;
  cout << "adj matrix" << endl;
  for (int i = 0; i < V; i++) {
    for (int j = 0; j < V; j++) {
      cout << adjMatrix[i][j] << " ";
    }
    cout << endl;
  }
}

int main() {
  Graph g;
  g.addEdge(0, {1, 1});
  g.addEdge(0, {2, 2});
  g.addEdge(1, {0, 3});
  g.addEdge(1, {2, 1});
  g.addEdge(2, {0, 2});
  g.addEdge(2, {1, 3});
  g.showEdges();
  return 0;
}
